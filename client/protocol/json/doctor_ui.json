{
  "protocol" : "doctorUi",
  "namespace" : "keybase.1",
  "types" : [ {
    "type" : "record",
    "name" : "Time",
    "fields" : [ ],
    "typedef" : "long"
  }, {
    "type" : "record",
    "name" : "StringKVPair",
    "fields" : [ {
      "name" : "key",
      "type" : "string"
    }, {
      "name" : "value",
      "type" : "string"
    } ]
  }, {
    "type" : "record",
    "name" : "Status",
    "fields" : [ {
      "name" : "code",
      "type" : "int"
    }, {
      "name" : "name",
      "type" : "string"
    }, {
      "name" : "desc",
      "type" : "string"
    }, {
      "name" : "fields",
      "type" : {
        "type" : "array",
        "items" : "StringKVPair"
      }
    } ]
  }, {
    "type" : "record",
    "name" : "UID",
    "fields" : [ ],
    "typedef" : "string"
  }, {
    "type" : "record",
    "name" : "DeviceID",
    "fields" : [ ],
    "typedef" : "string"
  }, {
    "type" : "record",
    "name" : "SigID",
    "fields" : [ ],
    "typedef" : "string"
  }, {
    "type" : "record",
    "name" : "KID",
    "fields" : [ ],
    "typedef" : "string"
  }, {
    "type" : "record",
    "name" : "Text",
    "fields" : [ {
      "name" : "data",
      "type" : "string"
    }, {
      "name" : "markup",
      "type" : "boolean"
    } ]
  }, {
    "type" : "record",
    "name" : "PGPIdentity",
    "fields" : [ {
      "name" : "username",
      "type" : "string"
    }, {
      "name" : "comment",
      "type" : "string"
    }, {
      "name" : "email",
      "type" : "string"
    } ]
  }, {
    "type" : "record",
    "name" : "PublicKey",
    "fields" : [ {
      "name" : "KID",
      "type" : "KID"
    }, {
      "name" : "PGPFingerprint",
      "type" : "string"
    }, {
      "name" : "PGPIdentities",
      "type" : {
        "type" : "array",
        "items" : "PGPIdentity"
      }
    }, {
      "name" : "isSibkey",
      "type" : "boolean"
    }, {
      "name" : "isEldest",
      "type" : "boolean"
    }, {
      "name" : "parentID",
      "type" : "string"
    }, {
      "name" : "deviceID",
      "type" : "DeviceID"
    }, {
      "name" : "deviceDescription",
      "type" : "string"
    }, {
      "name" : "deviceType",
      "type" : "string"
    }, {
      "name" : "cTime",
      "type" : "Time"
    }, {
      "name" : "eTime",
      "type" : "Time"
    } ]
  }, {
    "type" : "record",
    "name" : "User",
    "fields" : [ {
      "name" : "uid",
      "type" : "UID"
    }, {
      "name" : "username",
      "type" : "string"
    } ]
  }, {
    "type" : "record",
    "name" : "Device",
    "fields" : [ {
      "name" : "type",
      "type" : "string"
    }, {
      "name" : "name",
      "type" : "string"
    }, {
      "name" : "deviceID",
      "type" : "DeviceID"
    }, {
      "name" : "cTime",
      "type" : "Time"
    }, {
      "name" : "mTime",
      "type" : "Time"
    } ]
  }, {
    "type" : "record",
    "name" : "Stream",
    "fields" : [ {
      "name" : "fd",
      "type" : "int"
    } ]
  }, {
    "type" : "enum",
    "name" : "LogLevel",
    "symbols" : [ "NONE_0", "DEBUG_1", "INFO_2", "NOTICE_3", "WARN_4", "ERROR_5", "CRITICAL_6", "FATAL_7" ]
  }, {
    "type" : "enum",
    "name" : "DoctorFixType",
    "symbols" : [ "NONE_0", "ADD_ELDEST_DEVICE_1", "ADD_SIBLING_DEVICE_2" ]
  }, {
    "type" : "record",
    "name" : "DoctorSignerOpts",
    "fields" : [ {
      "name" : "otherDevice",
      "type" : "boolean"
    }, {
      "name" : "pgp",
      "type" : "boolean"
    }, {
      "name" : "internal",
      "type" : "boolean"
    } ]
  }, {
    "type" : "record",
    "name" : "DoctorStatus",
    "fields" : [ {
      "name" : "fix",
      "type" : "DoctorFixType"
    }, {
      "name" : "signerOpts",
      "type" : "DoctorSignerOpts"
    }, {
      "name" : "devices",
      "type" : {
        "type" : "array",
        "items" : "Device"
      }
    }, {
      "name" : "currentDevice",
      "type" : [ "null", "Device" ]
    } ]
  } ],
  "messages" : {
    "loginSelect" : {
      "doc" : "If doctor runs and login is needed, it will call this to give the\n    user the option of which user to log in as.  The login will be\n    different from a standard login as it won't try to fix the user's\n    keys immediately.",
      "request" : [ {
        "name" : "sessionID",
        "type" : "int"
      }, {
        "name" : "currentUser",
        "type" : "string"
      }, {
        "name" : "otherUsers",
        "type" : {
          "type" : "array",
          "items" : "string"
        }
      } ],
      "response" : "string"
    },
    "displayStatus" : {
      "doc" : "Once the user is logged in, the status of their account will be evaluated\n    and displayStatus() will be called with info about it.\n    Return true to proceed and do any necessary fixes. Return false to cancel.",
      "request" : [ {
        "name" : "sessionID",
        "type" : "int"
      }, {
        "name" : "status",
        "type" : "DoctorStatus"
      } ],
      "response" : "boolean"
    },
    "displayResult" : {
      "doc" : "If a fix is performed, displayResult() will be called after the fix is done.",
      "request" : [ {
        "name" : "sessionID",
        "type" : "int"
      }, {
        "name" : "message",
        "type" : "string"
      } ],
      "response" : "null"
    }
  }
}